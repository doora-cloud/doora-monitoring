version: "3.9"

services:
  grafana:
    image: grafana/grafana-oss:latest
    restart: always
    environment:
      GF_SERVER_DOMAIN: ${GRAFANA_URL}
      GF_SERVER_ROOT_URL: https://${GRAFANA_URL}
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: db:5432
      GF_DATABASE_NAME: ${POSTGRES_DB}
      GF_DATABASE_USER: ${POSTGRES_USER}
      GF_DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      GF_DATABASE_SSL_MODE: disable
      GF_AUTH_GENERIC_OAUTH_ENABLED: ${OAUTH2_ENABLED}
      GF_AUTH_GENERIC_OAUTH_SCOPES: openid email profile
      GF_AUTH_GENERIC_OAUTH_NAME: ${OAUTH2_NAME}
      GF_AUTH_GENERIC_OAUTH_CLIENT_ID: ${OAUTH2_CLIENT_ID}
      GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: ${OAUTH2_CLIENT_SECRET}
      GF_AUTH_GENERIC_OAUTH_AUTH_URL: ${OAUTH2_OPENID_URL}/auth
      GF_AUTH_GENERIC_OAUTH_TOKEN_URL: ${OAUTH2_OPENID_URL}/token
      GF_AUTH_GENERIC_OAUTH_API_URL: ${OAUTH2_OPENID_URL}/userinfo
      GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP: true
      GF_SMTP_ENABLED: ${SMTP_ENABLED}
      GF_SMTP_HOST: ${SMTP_HOST}
      GF_SMTP_USER: ${SMTP_USER}
      GF_SMTP_PASSWORD: ${SMTP_PASSWORD}
      GF_SMTP_SKIP_VERIFY: false
      GF_SMTP_FROM_NAME: ${SMTP_FROM_NAME}
      GF_SMTP_FROM_ADDRESS: ${SMTP_FROM_ADDRESS}
    volumes:
      - ${BASE_VOLUME}/grafana:/var/lib/grafana
    expose:
      - 3000
    networks:
      - internal
      - nginx
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grafana-cli", "plugins", "ls"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: ${LIMIT_CPU_GRAFANA:-1}
          memory: ${LIMIT_RAM_GRAFANA:-128M}
        reservations:
          cpus: "0.1"
          memory: 16M
  prometheus:
    image: prom/prometheus:latest
    restart: always
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
    volumes:
      - ${BASE_VOLUME}/prometheus:/etc/prometheus
    expose:
      - 9090
    networks:
      - internal
    depends_on:
      exporter:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "http://localhost:9090"]
      interval: 10s
      timeout: 15s
      retries: 10
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: ${LIMIT_CPU_PROMETHEUS:-1}
          memory: ${LIMIT_RAM_PROMETHEUS:-256M}
        reservations:
          cpus: "0.1"
          memory: 16M
  exporter:
    image: prom/node-exporter:latest
    restart: always
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    expose:
      - 9100
    networks:
      - internal
    deploy:
      resources:
        limits:
          cpus: ${LIMIT_CPU_EXPORTER:-0.5}
          memory: ${LIMIT_RAM_EXPORTER:-128M}
        reservations:
          cpus: "0.1"
          memory: 10M
  db:
    image: postgres:14-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ${BASE_VOLUME}/db:/var/lib/postgresql/data
    expose:
      - 5432
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: ${LIMIT_CPU_DB:-1}
          memory: ${LIMIT_RAM_DB:-256M}
        reservations:
          cpus: "0.1"
          memory: 16M

networks:
  internal:
  nginx:
    external: true
  monitoring:
    external: true
